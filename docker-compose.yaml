---
x-basic-deploy: &basic-deploy
  mode: replicated
  replicas: 1
  placement:
    max_replicas_per_node: 1
    constraints:
      - "node.role==${NODE_ROLE:-manager}"
      - node.platform.os == linux
  update_config:
    order: stop-first
  restart_policy:
    condition: any
  resources:
    limits:
      cpus: ${RESOURCES_LIMITS_CPUS:-1}
      memory: ${RESOURCES_LIMITS_MEMORY:-500m}
    reservations:
      cpus: ${RESOURCES_RESERVATIONS_CPUS:-0.001}
      memory: ${RESOURCES_RESERVATIONS_MEMORY:-32m}

x-basic: &basic
  env_file: .env
  cap_add:
    - DAC_READ_SEARCH
    - SETGID
    - SETUID
  cap_drop: ["ALL"]
  security_opt:
    - no-new-privileges:true
  ulimits:
    memlock:
      soft: -1
      hard: -1
    nofile:
      soft: 655360
      hard: 655360
    fsize: -1
    as: -1
  networks:
    default: {}
  healthcheck:
    disable: true
  restart: always

################################################################################
################################################################################
################################################################################
services:
  ##############################################################################
  ##############################################################################
  ##############################################################################
  
  # Uncomment the following service to generate certificates on container start.
  # certs_gen:
  #   build: .
  #   volumes:
  #     - ./scripts:/scripts
  #     - ./certs_gen:/certs
  #   entrypoint: ["/scripts/create-cert.sh"]

  bumper:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        # https://hub.docker.com/_/python/tags
        PY_VERSION: 3.13.5-alpine3.21
        # https://github.com/astral-sh/uv/pkgs/container/uv
        UV_VERSION: python3.13-alpine
    <<: *basic
    deploy:
      <<: *basic-deploy
    ports:
      # HTTP Server (non TLS)
      - target: 8007
        published: 8007
        protocol: tcp
        mode: host
      # MQTT Server (non TLS)
      - target: 1883
        published: 1883
        protocol: tcp
        mode: host
      # MQTT Server (TLS)
      - target: 8883
        published: 8883
        protocol: tcp
        mode: host
      # XMPP Server
      - target: 5223
        published: 5223
        protocol: tcp
        mode: host
    configs:
      - source: ca_config
        target: /bumper/certs/ca.crt
        mode: "0444"
      - source: server_crt_config
        target: /bumper/certs/bumper.crt
        mode: "0444"
      - source: server_key_config
        target: /bumper/certs/bumper.key
        mode: "0444"
    environment:
      TZ: ${TZ:-Europe/Berlin}
      BUMPER_ANNOUNCE_IP: ${BUMPER_ANNOUNCE_IP?Server Announce IP not set}
      BUMPER_LISTEN: ${BUMPER_LISTEN:-0.0.0.0}
      BUMPER_DEBUG_LEVEL: ${BUMPER_DEBUG_LEVEL:-INFO}
      BUMPER_DEBUG_VERBOSE: ${BUMPER_DEBUG_VERBOSE:-1}
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - config:/bumper/data

  ##############################################################################
  ##############################################################################
  ##############################################################################
  nginx:
    # https://hub.docker.com/_/nginx
    image: nginx:${VERSION_NGNIX:-1.27.5-alpine3.21-slim}
    <<: *basic
    deploy:
      <<: *basic-deploy
    ports:
      # HTTP Server (TLS)
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    configs:
      - source: nginx_config
        target: /etc/nginx/nginx.conf
        mode: "0444"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

################################################################################
################################################################################
################################################################################
networks:
  default:
    driver: ${NETWORK_MODE:-bridge}
    attachable: true
    driver_opts:
      encrypted: "true"

volumes:
  config: {}

configs:
  ca_config:
    file: $PWD/certs/ca.crt
  server_crt_config:
    file: $PWD/certs/bumper.crt
  server_key_config:
    file: $PWD/certs/bumper.key
  nginx_config:
    file: $PWD/configs/nginx.conf
